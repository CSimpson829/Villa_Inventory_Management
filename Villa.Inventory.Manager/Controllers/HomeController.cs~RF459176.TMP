using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Dapper;
using System.Data.SqlClient;
using System.Configuration;
using Villa.Inventory.Manager.Models;
using OfficeOpenXml;
using OfficeOpenXml.Drawing;
using System.IO;
using System.Drawing;

namespace Villa.Inventory.Manager.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index(String successMessage, String actionMessage, String errorMessage)
        {
                ActionResult result = null;
                var model = new Inventory.Manager.Models.HomeModel();

                using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["InventoryConnection"].ConnectionString))
                {
                    var inventoryItems = new List<InventoryItem>();

                    conn.Open();

                    var sql = "SELECT inventory_id, description, category, quantity, serial_number, purchase_date, assigned_employee, logged_date, logged_employee, notes FROM Table_6";

                    inventoryItems.AddRange(conn.Query<InventoryItem>(sql, new {}).ToList());

                    model.InventoryItem = inventoryItems;            
                }
                ViewBag.actionMessage = actionMessage;
                ViewBag.successMessage = successMessage;
                ViewBag.errorMessage = errorMessage;
                result = View("~/Views/Home/Index.cshtml", model);
                return result;   
        }

        public List<InventoryItem> getInventoryData()
        {
            var model = new Inventory.Manager.Models.HomeModel();
            var result = new List<InventoryItem>();
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["InventoryConnection"].ConnectionString))
            {
                var inventoryItems = new List<InventoryItem>();

                conn.Open();

                var sql = "SELECT inventory_id, description, category, quantity, serial_number, purchase_date, assigned_employee, logged_date, logged_employee, notes FROM Table_6";

                inventoryItems.AddRange(conn.Query<InventoryItem>(sql, new { }).ToList());

                result = inventoryItems;
            }
            return result;
        }

        public ActionResult ExportTableData(Villa.Inventory.Manager.Models.HomeModel inventoryDetails)
        {
            var model = new Inventory.Manager.Models.HomeModel()
            {
                InventoryItem = getInventoryData()
            };

            using(MemoryStream memoryStream = new MemoryStream())
            {
                using (var ep = new ExcelPackage(memoryStream))
                {
                    ep.Workbook.Worksheets.Add("List of Inventory");
                    var ws = ep.Workbook.Worksheets[1];

                    ws.Cells["A1"].Value = "Description";
                    ws.Cells["B1"].Value = "Category";
                    ws.Cells["C1"].Value = "Quantity";
                    ws.Cells["D1"].Value = "Serial Number";
                    ws.Cells["E1"].Value = "Purchase Date";
                    ws.Cells["F1"].Value = "Assigned Employee";
                    ws.Cells["G1"].Value = "Logged Date";
                    ws.Cells["H1"].Value = "Logged Employee";
                    ws.Cells["I1"].Value = "Notes";

                    var headerCells = ws.Cells["A1:I1"];
                    headerCells.Style.Font.Bold = true;
                    
                    Color fontColor = ColorTranslator.FromHtml("#FFFFFF");
                    headerCells.Style.Font.Color.SetColor(fontColor);

                    headerCells.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    //Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#e6e6e6");
                    Color cellColor = System.Drawing.ColorTranslator.FromHtml("#a83338");
                    headerCells.Style.Fill.BackgroundColor.SetColor(cellColor);
                    headerCells.AutoFitColumns();

                    var items = model.InventoryItem.OrderBy(x=>x.description).ToList();
                    for(var item=0; item<items.Count(); item++)
                    {
                        ws.Cells[$"A{item + 2}"].Value = items[item].description.Trim();
                        ws.Cells[$"B{item + 2}"].Value = items[item].category.Trim();
                        ws.Cells[$"C{item + 2}"].Value = items[item].quantity;
                        ws.Cells[$"D{item + 2}"].Value = items[item].serial_number.Trim();
                        ws.Cells[$"E{item + 2}"].Value = items[item].purchase_date.ToString();
                        ws.Cells[$"F{item + 2}"].Value = items[item].assigned_employee.Trim();
                        ws.Cells[$"G{item + 2}"].Value = items[item].logged_date.ToString();
                        ws.Cells[$"H{item + 2}"].Value = items[item].logged_employee.Trim();
                        ws.Cells[$"I{item + 2}"].Value = items[item].notes.Trim();

                        if ((item+2) % 2 == 0)
                        {
                            ws.Cells[$"A{item + 2}:I{item + 2}"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                            Color rowColor = System.Drawing.ColorTranslator.FromHtml("#e6e6e6");
                            ws.Cells[$"A{item + 2}:I{item + 2}"].Style.Fill.BackgroundColor.SetColor(rowColor);
                        }                        
                    }
                    ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column].AutoFitColumns();

                    ep.Save();
                }
                memoryStream.Flush();
                memoryStream.Seek(0, SeekOrigin.Begin);

                return new FileContentResult(memoryStream.ToArray(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") { FileDownloadName = $"Inventory_{DateTime.Now}.xlsx" };
            }
        }

        //Enter row into Database / Edit row in Database
        public ActionResult UpdateInventory(Villa.Inventory.Manager.Models.HomeModel inventoryDetails, String submit)
        {
            int InventoryID = inventoryDetails.InventoryEditItem.inventory_id;
            String actionMessage = "";
            String successMessage="";
            String errorMessage = "";

            var sql = "";

            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["InventoryConnection"].ConnectionString))
            {
                
                if (String.Equals(submit, "new")) {
                    //Enter new Row
                    if (InventoryID == 0)
                    {
                        sql = @"INSERT INTO Table_6 (description, category, quantity, serial_number, purchase_date, assigned_employee, logged_date, logged_employee, notes)
                                    VALUES (@Description, @Category, @Quantity, @SerialNumber, @PurchaseDate, @AssignedEmployee, @LoggedDate, @LoggedEmployee, @Notes)";
                        
                        actionMessage = "Insert";
                        successMessage = "New Inventory Item Successfully Inserted";
                    }
                    //Updating Existing Row
                    else
                    { 
                        sql = @"UPDATE Table_6 SET description = @Description, category = @Category, quantity= @Quantity, serial_number=@SerialNumber, purchase_date=@PurchaseDate,
                                    assigned_employee=@AssignedEmployee, logged_date=@LoggedDate, logged_employee=@LoggedEmployee, notes=@Notes WHERE inventory_id =@InventoryID";
                       
                        actionMessage = "Update";
                        successMessage = "Inventory Item Successfully Updated";
                    }

                    errorMessage = executeSQL(inventoryDetails, sql, InventoryID);
                }
                else if (String.Equals(submit, "delete"))
                {
                    actionMessage = "Delete";
                    successMessage = DeleteInventoryItem(inventoryDetails);
                }
            }

            return RedirectToAction("Index", new { successMessage = successMessage, actionMessage = actionMessage, errorMessage = errorMessage });
        }
        public String executeSQL(Villa.Inventory.Manager.Models.HomeModel inventoryDetails, string sql,  int InventoryID)
        {
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["InventoryConnection"].ConnectionString))
            {
                using (var cmd = new SqlCommand(sql, conn))
                {
                    conn.Open();

                    cmd.Parameters.AddWithValue("@Description", inventoryDetails.InventoryEditItem.description);
                    cmd.Parameters.AddWithValue("@Category", inventoryDetails.InventoryEditItem.category);
                    cmd.Parameters.AddWithValue("@Quantity", inventoryDetails.InventoryEditItem.quantity);
                    cmd.Parameters.AddWithValue("@SerialNumber", inventoryDetails.InventoryEditItem.serial_number);
                    cmd.Parameters.AddWithValue("@PurchaseDate", formatDate(inventoryDetails.InventoryEditItem.purchase_date_string, inventoryDetails.InventoryEditItem.purchase_time_string));
                    cmd.Parameters.AddWithValue("@AssignedEmployee", inventoryDetails.InventoryEditItem.assigned_employee);
                    cmd.Parameters.AddWithValue("@LoggedDate", DateTime.Now);
                    cmd.Parameters.AddWithValue("@LoggedEmployee", inventoryDetails.InventoryEditItem.logged_employee);
                    cmd.Parameters.AddWithValue("@Notes", inventoryDetails.InventoryEditItem.notes);
                    cmd.Parameters.AddWithValue("@InventoryID", InventoryID);

                    foreach (SqlParameter parameter in cmd.Parameters)
                    {
                        if (parameter.Value == null)
                        {
                            //parameter.Value = DBNull.Value;
                            parameter.Value = "";
                        }
                    }
                    try
                    {
                        cmd.ExecuteNonQuery();
                    }
                    catch (Exception e)
                    {
                        return(e.Message);                        
                    }
                    
                }
            }
            return null;
        }

        //sets input to correct format to be inserted into Database
        public DateTime formatDate(DateTime date, DateTime time)
        {
            String formatted_purchase_date = date.ToString("d")+" "+time.ToString("HH:mm:ss tt");
            return Convert.ToDateTime(formatted_purchase_date);
        } 
       /* public String formatInputString(String inputString)
        {
            if(string.IsNullOrEmpty(inputString) || !(inputString.Contains("\'")))
            {
                return inputString;
            }
            else{
                String reformattedString = "";
                String[] splitString = inputString.Split('\'');
                for (int i = 0; i < splitString.Length; i++)
                {
                    if (i < splitString.Length - 1) { reformattedString += splitString[i] + "\'\'"; }
                    else { reformattedString += splitString[splitString.Length - 1]; }
                }
                return reformattedString;
            }
        }
        */

        //Delete Row from the Database
        public String DeleteInventoryItem(Villa.Inventory.Manager.Models.HomeModel inventoryDetails)
        {
            String message = "";
            int InventoryID = inventoryDetails.InventoryEditItem.inventory_id;
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["InventoryConnection"].ConnectionString))
            {
                var sql = @"DELETE FROM Table_6 WHERE inventory_id = @inventoryID";
                using (var cmd = new SqlCommand(sql, conn))
                {
                    cmd.Parameters.AddWithValue("@inventoryID", InventoryID);
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }            
            }
            message = "Inventory Item Successfully Deleted";
            return message;
        }

        public ActionResult login(String username, String password)
        {
            var model = new Inventory.Manager.Models.HomeModel();
            var Users = new List<UserModel>();
            String user_role = "";
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["InventoryConnection"].ConnectionString))
            {

                var sql = @"SELECT user_role FROM Login_Table WHERE Username = @username AND Password = @password";
                using (var cmd = new SqlCommand(sql, conn))
                {
                    cmd.Parameters.AddWithValue("@username", username);
                    cmd.Parameters.AddWithValue("@password", password);
                    conn.Open();
                    //cmd.ExecuteScalar();
                    user_role = (String)cmd.ExecuteScalar();
                }
                model.UserModel = Users;
            }
            if (user_role == null)
            {
                return RedirectToAction("Index", new { usermodel = model.UserModel, errorMessage = "Login Not Found" });
            }
            else
            {
                return RedirectToAction("Index", new { usermodel = model.UserModel, successMessage = user_role, actionMessage = "Login" });
            }

        }
        
    }
   
}
